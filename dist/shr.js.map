{"version":3,"sources":["src/js/shr.js","src/js/utils/is.js","src/js/config/constants.js","src/js/config/defaults.js","src/js/utils/console.js","src/js/utils/objects.js","src/js/utils/storage.js","src/js/utils/ajax.js","src/js/utils/numbers.js","src/js/utils/urls.js","src/js/utils/css.js"],"names":["global","factory","exports","module","define","amd","self","Shr","this","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isString","String","isNodeList","NodeList","is","nullOrUndefined","object","number","Number","isNaN","string","boolean","Boolean","function","Function","array","nodeList","element","Element","event","Event","empty","keys","constants","facebook","domain","url","concat","shareCount","data","og_object","engagement","count","popup","width","height","twitter","pinterest","github","path","token","stargazers_count","youtube","id","error","first","items","statistics","subscriberCount","defaults","debug","classname","displayZero","format","position","increment","html","tokens","storage","enabled","ttl","noop","Console","a","arguments","window","console","log","get","bind","call","warn","extend","b","sources","d","source","shift","forEach","includes","assign","apply","Storage","supported","store","localStorage","getItem","Date","now","json","JSON","parse","setItem","stringify","removeItem","e","options","elements","trigger","document","querySelector","shr","config","networks","getCount","then","updateDisplay","catch","listeners","method","share","openPopup","network","networkConfig","preventDefault","size","name","closed","focus","left","screenLeft","screen","top","screenTop","x","y","open","href","useCache","Promise","resolve","reject","apiUrl","Error","cached","Math","round","random","script","createElement","addEventListener","body","removeChild","src","URL","searchParams","set","setAttribute","toString","appendChild","getJSONP","custom","getAttribute","parseInt","toLowerCase","label","isAfter","decimalSeparator","test","toLocaleString","regex","RegExp","replace","formatNumber","textContent","insertAdjacentHTML","find","n","hostname","parts","split","getDomain","pathname","substring","pop","encodeURIComponent","targets","from","querySelectorAll","filter","watch","MutationObserver","mutations","mutation","addedNodes","node","selector","matches","observe","childList","subtree","map","t"],"mappings":"CAAC,SAAUA,EAAQC,GACE,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAC9D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,MAAOH,IAC1DD,EAASA,GAAUM,MAAaC,IAAMN,IAHzC,CAIEO,KAAM,WAAc,aAEpB,SAASC,EAAgBC,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAIxB,SAASC,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAIlD,SAASO,EAAad,EAAae,EAAYC,GAG7C,OAFID,GAAYb,EAAkBF,EAAYiB,UAAWF,GACrDC,GAAad,EAAkBF,EAAagB,GACzChB,EAGT,SAASkB,EAAgBC,EAAKN,EAAKO,GAYjC,OAXIP,KAAOM,EACTR,OAAOC,eAAeO,EAAKN,EAAK,CAC9BO,MAAOA,EACPZ,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZS,EAAIN,GAAOO,EAGND,EAGT,SAASE,EAAeC,EAAKjB,GAC3B,OAGF,SAAyBiB,GACvB,GAAIC,MAAMC,QAAQF,GAAM,OAAOA,EAJxBG,CAAgBH,IAOzB,SAA+BA,EAAKjB,GAClC,IAAIqB,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKV,EAAIW,OAAOC,cAAmBP,GAAMI,EAAKC,EAAGG,QAAQC,QAChEV,EAAKW,KAAKN,EAAGX,QAETf,GAAKqB,EAAKpB,SAAWD,GAH8CsB,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,EA9BwBa,CAAsBjB,EAAKjB,IAiC5D,WACE,MAAM,IAAIJ,UAAU,wDAlC4CuC,GAwClE,IChFIC,EAAiB,SAAAC,GAAK,OAAA,MAAKA,EAAiDA,EAAMC,YAAc,MAChGC,EAAa,SAACF,EAAOC,GAAR,SAAgCD,GAASC,GAAeD,aAAiBC,IAEtFE,EAAoB,SAAAH,GAAK,OAAA,MAAIA,GAC7BI,EAAW,SAAAJ,GAAK,OAAID,EAAeC,KAAW/B,QAE9CoC,EAAW,SAAAL,GAAK,OAAID,EAAeC,KAAWM,QAG9CxB,EAAU,SAAAkB,GAAK,OAAInB,MAAMC,QAAQkB,IACjCO,EAAa,SAAAP,GAAK,OAAIE,EAAWF,EAAOQ,WAQ9CC,EAAe,CACXC,gBAAiBP,EACjBQ,OAAQP,EACRQ,OAhBa,SAAAZ,GAAK,OAAID,EAAeC,KAAWa,SAAWA,OAAOC,MAAMd,IAiBxEe,OAAQV,EACRW,QAhBc,SAAAhB,GAAK,OAAID,EAAeC,KAAWiB,SAiBjDC,SAhBe,SAAAlB,GAAK,OAAID,EAAeC,KAAWmB,UAiBlDC,MAAOtC,EACPuC,SAAUd,EACVe,QAhBc,SAAAtB,GAAK,OAAIE,EAAWF,EAAOuB,UAiBzCC,MAhBY,SAAAxB,GAAK,OAAIE,EAAWF,EAAOyB,QAiBvCC,MAhBY,SAAA1B,GAAK,OACjBG,EAAkBH,KAChBK,EAASL,IAAUlB,EAAQkB,IAAUO,EAAWP,MAAYA,EAAMpC,QACnEwC,EAASJ,KAAW/B,OAAO0D,KAAK3B,GAAOpC,SCOtCgE,EAAY,CACdC,SAAU,CACNC,OAAQ,eACRC,IAAK,SAAAA,GAAG,MAAA,kCAAAC,OAAsCD,EAAtC,kCACRE,WAAY,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,WAAWC,OAC9CC,MAAO,CACHC,MAAO,IACPC,OAAQ,MAIhBC,QAAS,CACLX,OAAQ,cACRC,IAAK,WAAA,OAAA,MACLE,WAAY,WAAA,OAAA,MACZK,MAAO,CACHC,MAAO,IACPC,OAAQ,MAIhBE,UAAW,CACPZ,OAAQ,gBACRC,IAAK,SAAAA,GAAG,MAAA,wDAAAC,OAA4DD,IACpEE,WAAY,SAAAC,GAAI,OAAIA,EAAKG,OACzBC,MAAO,CACHC,MAAO,IACPC,OAAQ,MAIhBG,OAAQ,CACJb,OAAQ,aACRC,IAAK,SAACa,EAAMC,GAAP,MAAA,gCAAAb,OAAiDY,GAAjDZ,OAAwDvB,EAAGM,OAAO8B,GAAV,iBAAAb,OAAoCa,GAAU,KAC3GZ,WAAY,SAAAC,GAAI,OAAIA,EAAKA,KAAKY,mBAGlCC,QAAS,CACLjB,OAAQ,cACRC,IAAK,SAACiB,EAAI7E,GAAL,MAAA,qEAAA6D,OAAkFgB,EAAlF,SAAAhB,OAA4F7D,IACjG8D,WAAY,SAAAC,GACR,IAAKzB,EAAGiB,MAAMQ,EAAKe,OACf,OAAA,KAFY,IAKTC,EALSvE,EAKAuD,EAAKiB,MALL,GAAA,GAAA,OAOZ1C,EAAGiB,MAAMwB,GACF,KAGJA,EAAME,WAAWC,mBC7B9BC,EAAW,CACbC,OAAK,EACLlB,MAAO,CACHmB,UAAW,YACXC,aAAW,EACXC,QAAM,EACNC,SAAU,QACVC,WAAS,EACTC,KAAM,SAACxB,EAAOmB,EAAWG,GAAnB,MAAA,gBAAA3B,OAAgDwB,EAAhD,KAAAxB,OAA6DwB,EAA7D,MAAAxB,OAA2E2B,EAA3E,MAAA3B,OAAwFK,EAAxF,aAEVyB,OAAQ,CACJnB,OAAQ,GACRI,QAAS,IAEbgB,QAAS,CACLC,SAAO,EACP7F,IAAK,MACL8F,IAAK,MH4GX,II1KIC,EAAO,aAEQC,EAAAA,WACjB,SAAAC,IAA6B,IAAjBJ,KAAiB,EAAAK,UAAAzG,aAAA,IAAAyG,UAAA,KAAAA,UAAA,GAAAjH,EAAAD,KAAAiH,GACzBjH,KAAK6G,QAAUM,OAAOC,SAAWP,EAE7B7G,KAAK6G,SACL7G,KAAKqH,IAAI,qBAEhB,OAAApG,EAAAgG,EAAA,CAAA,CAAAjG,IAAA,MAAAsG,IAAA,WAGG,OAAAtH,KAAY6G,QACN7C,SAAS5C,UAAUmG,KAAKC,KAAKJ,QAAQC,IAAKD,SAC1CL,IACT,CAAA/F,IAAA,OAAAsG,IAAA,WAGG,OAAAtH,KAAY6G,QACN7C,SAAS5C,UAAUmG,KAAKC,KAAKJ,QAAQK,KAAML,SAC3CL,IACT,CAAA/F,IAAA,QAAAsG,IAAA,WAGG,OAAAtH,KAAY6G,QACN7C,SAAS5C,UAAUmG,KAAKC,KAAKJ,QAAQtB,MAAOsB,SAC5CL,MACTE,EAzBgBD,GJoLnB,SKnLcU,IAAgC,IAAA,IAAzBpH,EAAyB,EAAA4G,UAAAzG,aAAA,IAAAyG,UAAA,GAAAA,UAAA,GAAhB,GAAgBS,EAAAT,UAAAzG,OAATmH,EAASlG,MAAA,EAAAiG,EAAAA,EAAA,EAAA,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAATD,EAASC,EAAA,GAAAX,UAAAW,GAC5C,IAAKD,EAAQnH,OACT,OAAOH,EAGX,IAAMwH,EAASF,EAAQG,QALqB,OAOvCzE,EAAGE,OAAOsE,IAIfhH,OAAO0D,KAAKsD,GAAQE,QAAQ,SAAAhH,GACpBsC,EAAGE,OAAOsE,EAAO9G,MACZF,OAAO0D,KAAKlE,GAAQ2H,SAASjH,IAC9BF,OAAOoH,OAAO5H,EAAde,EAAA,GAAyBL,EAAM,KAGnC0G,EAAOpH,EAAOU,GAAM8G,EAAO9G,KAE3BF,OAAOoH,OAAO5H,EAAde,EAAA,GAAyBL,EAAM8G,EAAO9G,OAIvC0G,EAAMS,WAAN,EAAA,CAAO7H,GAAPuE,OAAkB+C,KAfdtH,EL6Kb,IMrLI8H,EAAAA,WACF,SAAAnB,EAAYjG,EAAK8F,GAAqB,IAAhBD,IAAgB,EAAAK,UAAAzG,aAAA,IAAAyG,UAAA,KAAAA,UAAA,GAAAjH,EAAAD,KAAAiH,GAClCjH,KAAK6G,QAAUA,GAAWuB,EAAQC,UAClCrI,KAAKgB,IAAMA,EACXhB,KAAK8G,IAAMA,ENkLjB,OAAO7F,EAAagG,EAAE,CAAC,CAACjG,IAAI,MAAMO,MAAM,SM3JlCP,GACA,IAAKoH,EAAQC,YAAcrI,KAAK6G,QAC5B,OAAA,KAGJ,IAAMyB,EAAQnB,OAAOoB,aAAaC,QAAQxI,KAAKgB,KAE/C,GAAIsC,EAAGiB,MAAM+D,GACT,OAAA,KAIJ,IAAMxB,EAAMK,OAAOoB,aAAaC,QAApB,GAAA3D,OAA+B7E,KAAKgB,IAApC,SAEZ,GAAIsC,EAAGiB,MAAMuC,IAAQA,EAAM2B,KAAKC,MAC5B,OAAA,KAGJ,IAAMC,EAAOC,KAAKC,MAAMP,GAExB,OAAOhF,EAAGM,OAAO5C,IAAQA,EAAIP,OAASkI,EAAK3H,GAAO2H,IACrD,CAAA3H,IAAA,MAAAO,MAAA,SAEGiC,GAEA,GAAK4E,EAAQC,WAAcrI,KAAK6G,SAK3BvD,EAAGE,OAAOA,GALf,CAUA,IAAIoD,EAAU5G,KAAKsH,MAGfhE,EAAGiB,MAAMqC,KACTA,EAAU,IAIdc,EAAOd,EAASpD,GAGhB2D,OAAOoB,aAAaO,QAAQ9I,KAAKgB,IAAK4H,KAAKG,UAAUnC,IACrDO,OAAOoB,aAAaO,QAApB,GAAAjE,OAA+B7E,KAAKgB,IAApC,QAA+CyH,KAAKC,MAAQ1I,KAAK8G,SACpE,CAAA,CAAA9F,IAAA,YAAAsG,IAAA,WAlEG,IACI,MAAM,iBAAkBH,SAQxBA,OAAOoB,aAAaO,QAApB,UAAA,WACA3B,OAAOoB,aAAaS,WAApB,YAEA,GACF,MAAOC,GACL,OAAA,OAEPhC,EAzBCmB,GNsQJ,OA3PIrI,WAMF,SAAAkH,EAAY3G,EAAQ4I,GAAS,IAAArB,EAAA7H,KAAAC,EAAAD,KAAAiH,GACzBjH,KAAKmJ,SAAW,CACZjE,MAAO,KACPkE,QAAS,KACTjE,MAAO,MAGP7B,EAAGa,QAAQ7D,GAEXN,KAAKmJ,SAASC,QAAU9I,EACjBgD,EAAGM,OAAOtD,KAEjBN,KAAKmJ,SAASC,QAAUC,SAASC,cAAchJ,IAG9CgD,EAAGa,QAAQnE,KAAKmJ,SAASC,UAAa9F,EAAGiB,MAAMvE,KAAKmJ,SAASC,QAAQG,OAI1EvJ,KAAKwJ,OAAS9B,EAAO,GAAIvB,EAAU+C,EAAS,CAAEO,SAAUhF,IAExDzE,KAAKoH,QAAU,IAAIJ,EAAQhH,KAAKwJ,OAAOpD,OAEvCpG,KAAK4G,QAAU,IAAIwB,EAAQpI,KAAKwJ,OAAO5C,QAAQ5F,IAAKhB,KAAKwJ,OAAO5C,QAAQE,IAAK9G,KAAKwJ,OAAO5C,QAAQC,SAEjG7G,KAAK0J,WACAC,KAAK,SAAA5E,GAAI,OAAI8C,EAAK+B,cAAc7E,KAChC8E,MAAM,cAEX7J,KAAK8J,WAAL,GAEA9J,KAAKmJ,SAASC,QAAQG,IAAMvJ,MAsJ3B,OAAOiB,EAAagG,EAAE,CAAC,CAACjG,IAAI,UAAUO,MAAM,WA9I7CvB,KAAK8J,WAAL,KAiJG,CAAC9I,IAAI,YAAYO,MAAM,WAxIJ,IAAA0F,EAAAjH,KAChB+J,KADgB,EAAA7C,UAAAzG,aAAA,IAAAyG,UAAA,KAAAA,UAAA,GACE,mBAAqB,sBAE7ClH,KAAKmJ,SAASC,QAAQW,GAAQ,QAAS,SAAA1F,GAAK,OAAI4C,EAAK+C,MAAM3F,KAA3D,KAwIG,CAACrD,IAAI,QAKPO,MAAM,SA7CL8C,GAAO,IAAAsD,EAAA3H,KACTA,KAAKiK,UAAU5F,GAEfrE,KAAK0J,WACAC,KAAK,SAAA5E,GAAI,OAAI4C,EAAKiC,cAAc7E,EAAM4C,EAAK6B,OAAO/C,aAClDoD,MAAM,gBA4CR,CAAC7I,IAAI,YAAYO,MAAM,SApCpB8C,GACN,GAAKf,EAAGe,MAAMA,KAKVf,EAAGiB,MAAMvE,KAAKkK,UAAalK,KAAKmK,cAAchF,MALlD,CAUAd,EAAM+F,iBAVN,IAaMC,EAAOrK,KAAKmK,cAAchF,MACxBC,EAAkBiF,EAAlBjF,MAAOC,EAAWgF,EAAXhF,OACTiF,EAAI,cAAAzF,OAAiB7E,KAAKkK,SAGhC,GAAIlK,KAAKmF,QAAUnF,KAAKmF,MAAMoF,OAC1BvK,KAAKmF,MAAMqF,QAEXxK,KAAKoH,QAAQC,IAAI,yBACd,CAAA,IAEGoD,OAAO,IAAAtD,OAAOuD,WAA+CvD,OAAOwD,OAAOF,KAAlCtD,OAAOuD,WAChDE,OAAM,IAAAzD,OAAO0D,UAA6C1D,OAAOwD,OAAOC,IAAjCzD,OAAO0D,UAG9CC,EAAI3D,OAAOwD,OAAOvF,MAAQ,EAAIA,EAAQ,EAAIqF,EAC1CM,EAAI5D,OAAOwD,OAAOtF,OAAS,EAAIA,EAAS,EAAIuF,EAGlD5K,KAAKmF,MAAQgC,OAAO6D,KAAKhL,KAAKiL,KAAMX,EAAvB,OAAAzF,OAAoCkG,EAApC,UAAAlG,OAA8CiG,EAA9C,WAAAjG,OAAyDO,EAAzD,YAAAP,OAAyEQ,KAGrErF,KAAKmF,OAASnF,KAAKmF,MAAMoF,SAAWjH,EAAGO,QAAQ7D,KAAKmF,MAAMoF,QAYvEvK,KAAKoH,QAAQtB,MAAM,mBARnB9F,KAAKmF,MAAMqF,QAMXxK,KAAKoH,QAAQC,IAAI,sBACtB,CAACrG,IAAI,WAAWO,MAAM,WAWH,IAAA0F,EAAAjH,KAAjBkL,IAAiB,EAAAhE,UAAAzG,aAAA,IAAAyG,UAAA,KAAAA,UAAA,GACtB,OAAA,IAAWiE,QAAQ,SAACC,EAASC,GAEzB,IAAMzG,EAAMqC,EAAKqE,OAMjB,GAAIhI,EAAGiB,MAAMK,GACTyG,EAAO,IAAIE,MAAJ,wBAAA1G,OAAkCoC,EAAKiD,QAAvC,WADX,CAMA,GAAIgB,EAAU,CACV,IAAMM,EAASvE,EAAKL,QAAQU,IAAIL,EAAK3G,QAErC,IAAKgD,EAAGiB,MAAMiH,IAAW1K,OAAO0D,KAAKgH,GAAQvD,SAAShB,EAAKiD,SAGvD,OAFAkB,EAAQI,EAAOvE,EAAKiD,eACpBjD,EAAKG,QAAQC,IAAI,kCOhQrC,SAAyBzC,GACrB,OAAA,IAAWuG,QAAQ,SAACC,EAASC,GAAW,IAE9Bf,EAAI,kBAAAzF,OAAqB4G,KAAKC,MAAM,IAASD,KAAKE,WAGlDC,EAASvC,SAASwC,cAAc,UAGtCD,EAAOE,iBAAiB,QAAS,SAAAhG,GAAK,OAAIuF,EAAOvF,KAGjDqB,OAAOmD,GAAQ,SAAAvF,UACJoC,OAAOmD,GACdjB,SAAS0C,KAAKC,YAAYJ,GAC1BR,EAAQrG,IAIZ,IAAMkH,EAAM,IAAIC,IAAItH,GACpBqH,EAAIE,aAAaC,IAAI,WAAY9B,GAGjCsB,EAAOS,aAAa,MAAOJ,EAAIK,YAG/BjD,SAAS0C,KAAKQ,YAAYX,MPgPtBY,CAAS5H,GACJ+E,KAAK,SAAA5E,GAAQ,IACNG,EAAQ,EACNuH,EAASxF,EAAKkC,SAASC,QAAQsD,aAAa,oBAM9CxH,EAHC5B,EAAGiB,MAAMkI,GAGFxF,EAAKkD,cAAcrF,WAAWC,GAF9BA,EAAK0H,GAMbnJ,EAAGiB,MAAMW,KACTA,EAAQ,GAIZA,EAAQyH,SAASzH,EAAO,IAGxB+B,EAAKL,QAAQwF,IAAb/K,EAAA,GACK4F,EAAK3G,OADVe,EAAA,GAES4F,EAAKiD,QAAUhF,KAIxBkG,EAAQlG,KAEX2E,MAAMwB,QAxDZ,CAACrK,IAAI,gBAAgBO,MAAM,SAkEpBsB,GAA0B,IAE9BqC,KAF8B,EAAAgC,UAAAzG,aAAA,IAAAyG,UAAA,KAAAA,UAAA,GAEVrE,EAAQ,EAAIA,EAGhC2D,EAAWxG,KAAKwJ,OAAOtE,MAAMsB,SAASoG,cAG5C,GAAY,EAAR1H,GAAalF,KAAKwJ,OAAOtE,MAAMoB,YAAa,CAAA,IAIxCuG,EAHEC,EAAuB,UAAbtG,EAKZqG,EADA7M,KAAKwJ,OAAOtE,MAAMqB,QAAkB,IAARrB,EALY,GAAAL,OAM7B4G,KAAKC,MAAMxG,EAAQ,KANU,KAOjClF,KAAKwJ,OAAOtE,MAAMqB,QAAkB,IAARrB,EAPK,GAAAL,OAQ7B4G,KAAKC,MAAMxG,EAAQ,KARU,KAzItD,SQtL2BzB,GAAQ,IAE3BsJ,EAAmB,KAAKC,KAAM,IAAKC,kBAAoB,IAAM,IAG7DC,EAAQ,IAAIC,OAAJ,KAAAtI,OAAgBkI,EAAhB,UAEd,OAAOtB,KAAKC,MAAMjI,GACbwJ,iBACAG,QAAQF,EAAO,IRgUAG,CAAanI,GAIrB5B,EAAGa,QAAQnE,KAAKmJ,SAASjE,OACzBlF,KAAKmJ,SAASjE,MAAMoI,YAAcT,GAGlC7M,KAAKmJ,SAASC,QAAQmE,mBAClBT,EAAU,WAAa,cACvB9M,KAAKwJ,OAAOtE,MAAMwB,KAAKmG,EAAO7M,KAAKwJ,OAAOtE,MAAMmB,UAAWG,IAI/DxG,KAAKmJ,SAASjE,MAAQlF,KAAKmJ,SAASC,QAAQ0D,EAAU,cAAgB,uBA3F3E,CAAC9L,IAAI,OAAOsG,IAAI,WA1KZ,OACFhE,EAAGa,QAAQnE,KAAKmJ,SAASC,SAIvBpJ,KAAKmJ,SAASC,QAAQ6B,KAHlB,OA2KR,CAACjK,IAAI,UAAUsG,IAAI,WAjKZ,IAAAL,EAAAjH,KACV,IAAKsD,EAAGa,QAAQnE,KAAKmJ,SAASC,SAC1B,OAAA,KAFM,IAKFK,EAAazJ,KAAKwJ,OAAlBC,SAER,OAAO3I,OAAO0D,KAAKiF,GAAU+D,KAAK,SAAAC,GAAC,OA+FzC,SSpMwBxC,GAAM,IAExBtG,EADQ,IAAIuH,IAAIjB,GACHyC,SACXC,EAAQhJ,EAAOiJ,MAAM,KACnBnN,EAAWkN,EAAXlN,OAYR,OAAA,EATIA,IACAkE,EAAM,GAAAE,OAAM8I,EAAMlN,EAAS,GAArB,KAAAoE,OAA2B8I,EAAMlN,EAAS,IAGf,IAA7BkN,EAAMlN,EAAS,GAAGA,QAA6C,IAA7BkN,EAAMlN,EAAS,GAAGA,SACpDkE,EAAM,GAAAE,OAAM8I,EAAMlN,EAAS,GAArB,KAAAoE,OAA2BF,KAIlCA,ETqFoCkJ,CAAU5G,EAAKgE,QAAUxB,EAASgE,GAAG9I,WA6JzE,CAAC3D,IAAI,gBAAgBsG,IAAI,WAtJZ,OACZhE,EAAGiB,MAAMvE,KAAKkK,SACP,KAGJlK,KAAKwJ,OAAOC,SAASzJ,KAAKkK,WAoJ9B,CAAClJ,IAAI,SAASsG,IAAI,WA5IrB,GAAIhE,EAAGiB,MAAMvE,KAAKkK,SACd,OAAA,KAGJ,IAAMtF,EAAM,IAAIsH,IAAIlM,KAAKiL,MAEzB,OAAQjL,KAAKkK,SACT,IAAK,WACD,OAAOtF,EAAIuH,aAAa7E,IAAI,KAEhC,IAAK,SACD,OAAO1C,EAAIkJ,SAASC,UAAU,GAElC,IAAK,UACD,OAAOnJ,EAAIkJ,SAASF,MAAM,KAAKI,MAEnC,QACI,OAAOpJ,EAAIuH,aAAa7E,IAAI,UA8HjC,CAACtG,IAAI,SAASsG,IAAI,WArHrB,GAAIhE,EAAGiB,MAAMvE,KAAKkK,SACd,OAAA,KAFK,IAKDvD,EAAW3G,KAAKwJ,OAAhB7C,OAER,OAAQ3G,KAAKkK,SACT,IAAK,SACD,OAAAlK,KAAYmK,cAAcvF,IAAI5E,KAAKM,OAAQqG,EAAOnB,QAEtD,IAAK,UACD,OAAAxF,KAAYmK,cAAcvF,IAAI5E,KAAKM,OAAQqG,EAAOf,SAEtD,QACI,OAAA5F,KAAYmK,cAAcvF,IAAIqJ,mBAAmBjO,KAAKM,aAEjE,CAAA,CAAAU,IAAA,QAAAO,MAAA,SA+LYjB,GAAsB,IAAd4I,EAAc,EAAAhC,UAAAzG,aAAA,IAAAyG,UAAA,GAAAA,UAAA,GAAJ,GACvBgH,EAAU,KAYd,GAVI5K,EAAGM,OAAOtD,GACV4N,EAAUxM,MAAMyM,KAAK9E,SAAS+E,iBAAiB9N,IACxCgD,EAAGa,QAAQ7D,GAClB4N,EAAU,CAAC5N,GACJgD,EAAGY,SAAS5D,GACnB4N,EAAUxM,MAAMyM,KAAK7N,GACdgD,EAAGW,MAAM3D,KAChB4N,EAAU5N,EAAO+N,OAAO/K,EAAGa,UAG3Bb,EAAGiB,MAAM2J,GACT,OAAA,KAGJ,IAAM1E,EAAS1I,OAAOoH,OAAO,GAAI/B,EAAU+C,GAEvC5F,EAAGM,OAAOtD,IAAWkJ,EAAO8E,OAEX,IAAIC,iBAAiB,SAAAC,GAClC9M,MAAMyM,KAAKK,GAAWxG,QAAQ,SAAAyG,GAC1B/M,MAAMyM,KAAKM,EAASC,YAAY1G,QAAQ,SAAA2G,GAC/BrL,EAAGa,QAAQwK,IUzXxC,SAAwBxK,EAASyK,GAc7B,OAXA,WACI,OAAOlN,MAAMyM,KAAK9E,SAAS+E,iBAAiBQ,IAAW3G,SAASjI,OAUrDwH,KAAKrD,EAASyK,GV2WiBC,CAAQF,EAAMrO,IAK1B,IAAIP,EAAI4O,EAAMnF,SAM/BsF,QAAQzF,SAAS0C,KAAM,CAC5BgD,WAAS,EACTC,SAAO,IAIf,OAAOd,EAAQe,IAAI,SAAAC,GAAC,OAAA,IAAQnP,EAAImP,EAAGhG,SACtCjC,EA1XClH","file":"shr.js","sourcesContent":["/**\n * @name    Shr.js\n * @version 2.0.0-beta.1\n * @author \tSam Potts\n * @license The MIT License (MIT)\n */\n\nimport constants from './config/constants';\nimport defaults from './config/defaults';\nimport { getJSONP } from './utils/ajax';\nimport Console from './utils/console';\nimport { matches } from './utils/css';\nimport is from './utils/is';\nimport { formatNumber } from './utils/numbers';\nimport { extend } from './utils/objects';\nimport Storage from './utils/storage';\nimport { getDomain } from './utils/urls';\n\nclass Shr {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        this.elements = {\n            count: null,\n            trigger: null,\n            popup: null,\n        };\n\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.elements.trigger = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.elements.trigger = document.querySelector(target);\n        }\n\n        if (!is.element(this.elements.trigger) || !is.empty(this.elements.trigger.shr)) {\n            return;\n        }\n\n        this.config = extend({}, defaults, options, { networks: constants });\n\n        this.console = new Console(this.config.debug);\n\n        this.storage = new Storage(this.config.storage.key, this.config.storage.ttl, this.config.storage.enabled);\n\n        this.getCount()\n            .then(data => this.updateDisplay(data))\n            .catch(() => {});\n\n        this.listeners(true);\n\n        this.elements.trigger.shr = this;\n    }\n\n    /**\n     * Destroy the current instance\n     * @returns {Void}\n     */\n    destroy() {\n        this.listeners(false);\n\n        // TODO: Remove the count\n    }\n\n    /**\n     * Setup event listeners\n     * @returns {Void}\n     */\n    listeners(toggle = false) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        this.elements.trigger[method]('click', event => this.share(event), false);\n    }\n\n    /**\n     * Gets the href from the trigger link\n     * @returns {String}    The href attribute from the link\n     */\n    get href() {\n        if (!is.element(this.elements.trigger)) {\n            return null;\n        }\n\n        return this.elements.trigger.href;\n    }\n\n    /**\n     * Gets the network for this instance\n     * @returns {String}    The network name in lowercase\n     */\n    get network() {\n        if (!is.element(this.elements.trigger)) {\n            return null;\n        }\n\n        const { networks } = this.config;\n\n        return Object.keys(networks).find(n => getDomain(this.href) === networks[n].domain);\n    }\n\n    /**\n     * Gets the config for the specified network\n     * @returns {Object}    The config options\n     */\n    get networkConfig() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        return this.config.networks[this.network];\n    }\n\n    /**\n     * Gets the URL or ID we are geting the share count for\n     * @returns {String}    The target ID or URL we're sharing\n     */\n    get target() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        const url = new URL(this.href);\n\n        switch (this.network) {\n            case 'facebook':\n                return url.searchParams.get('u');\n\n            case 'github':\n                return url.pathname.substring(1);\n\n            case 'youtube':\n                return url.pathname.split('/').pop();\n\n            default:\n                return url.searchParams.get('url');\n        }\n    }\n\n    /**\n     * Gets for the URL for the JSONP endpoint\n     * @returns {String}    The URL for the JSONP endpoint\n     */\n    get apiUrl() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        const { tokens } = this.config;\n\n        switch (this.network) {\n            case 'github':\n                return this.networkConfig.url(this.target, tokens.github);\n\n            case 'youtube':\n                return this.networkConfig.url(this.target, tokens.youtube);\n\n            default:\n                return this.networkConfig.url(encodeURIComponent(this.target));\n        }\n    }\n\n    /**\n     * Initiate the share process\n     * This must be user triggered or the popup will be blocked\n     * @param {Event} event     The user input event\n     * @returns {Void}\n     */\n    share(event) {\n        this.openPopup(event);\n\n        this.getCount()\n            .then(data => this.updateDisplay(data, this.config.increment))\n            .catch(() => {});\n    }\n\n    /**\n     * Displays a pop up window to share on the requested social network.\n     * @param {Event} event   - Event that triggered the popup window.\n     * @returns {Void}\n     */\n    openPopup(event) {\n        if (!is.event(event)) {\n            return;\n        }\n\n        // Only popup if we need to...\n        if (is.empty(this.network) || !this.networkConfig.popup) {\n            return;\n        }\n\n        // Prevent the link opening\n        event.preventDefault();\n\n        // Set variables for the popup\n        const size = this.networkConfig.popup;\n        const { width, height } = size;\n        const name = `shr-popup--${this.network}`;\n\n        // If window already exists, just focus it\n        if (this.popup && !this.popup.closed) {\n            this.popup.focus();\n\n            this.console.log('Popup re-focused.');\n        } else {\n            // Get position\n            const left = window.screenLeft !== undefined ? window.screenLeft : window.screen.left;\n            const top = window.screenTop !== undefined ? window.screenTop : window.screen.top;\n\n            // Open in the centre of the screen\n            const x = window.screen.width / 2 - width / 2 + left;\n            const y = window.screen.height / 2 - height / 2 + top;\n\n            // Open that window\n            this.popup = window.open(this.href, name, `top=${y},left=${x},width=${width},height=${height}`);\n\n            // Determine if the popup was blocked\n            const blocked = !this.popup || this.popup.closed || !is.boolean(this.popup.closed);\n\n            // Focus new window\n            if (!blocked) {\n                this.popup.focus();\n\n                // Nullify opener to prevent \"tab nabbing\"\n                // https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/\n                // this.popup.opener = null;\n\n                this.console.log('Popup opened.');\n            } else {\n                this.console.error('Popup blocked.');\n            }\n        }\n    }\n\n    /**\n     * Get the count for the url from API\n     * @param {Boolean} useCache        Whether to use the local storage cache or not\n     * @returns {Promise}\n     */\n    getCount(useCache = true) {\n        return new Promise((resolve, reject) => {\n            // Format the JSONP endpoint\n            const url = this.apiUrl;\n\n            // If there's an endpoint. For some social networks, you can't\n            // get the share count (like Twitter) so we won't have any data. The link\n            // will be to share it, but you won't get a count of how many people have.\n\n            if (is.empty(url)) {\n                reject(new Error(`No URL available for ${this.network}.`));\n                return;\n            }\n\n            // Check cache first\n            if (useCache) {\n                const cached = this.storage.get(this.target);\n\n                if (!is.empty(cached) && Object.keys(cached).includes(this.network)) {\n                    resolve(cached[this.network]);\n                    this.console.log('getCount resolved from cache.');\n                    return;\n                }\n            }\n\n            // When we get here, this means the cached counts are not valid,\n            // or don't exist. We will call the API if the URL is available\n            // at this point.\n\n            // Runs a GET request on the URL\n            getJSONP(url)\n                .then(data => {\n                    let count = 0;\n                    const custom = this.elements.trigger.getAttribute('data-shr-display');\n\n                    // Get value based on config\n                    if (!is.empty(custom)) {\n                        count = data[custom];\n                    } else {\n                        count = this.networkConfig.shareCount(data);\n                    }\n\n                    // Default to zero for undefined\n                    if (is.empty(count)) {\n                        count = 0;\n                    }\n\n                    // Parse\n                    count = parseInt(count, 10);\n\n                    // Cache in local storage\n                    this.storage.set({\n                        [this.target]: {\n                            [this.network]: count,\n                        },\n                    });\n\n                    resolve(count);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Display the count\n     * @param {Number} input         - The count returned from the share count API\n     * @param {Boolean} increment   -  Determines if we should increment the count or not\n     * @returns {Void}\n     */\n    updateDisplay(input, increment = false) {\n        // If we're incrementing (e.g. on click)\n        const count = increment ? input + 1 : input;\n\n        // Standardize position\n        const position = this.config.count.position.toLowerCase();\n\n        // Only display if there's a count\n        if (count > 0 || this.config.count.displayZero) {\n            const isAfter = position === 'after';\n\n            // Format\n            let label;\n            if (this.config.count.format && count > 1000000) {\n                label = `${Math.round(count / 1000000)}M`;\n            } else if (this.config.count.format && count > 1000) {\n                label = `${Math.round(count / 1000)}K`;\n            } else {\n                label = formatNumber(count);\n            }\n\n            // Update or insert\n            if (is.element(this.elements.count)) {\n                this.elements.count.textContent = label;\n            } else {\n                // Insert count display\n                this.elements.trigger.insertAdjacentHTML(\n                    isAfter ? 'afterend' : 'beforebegin',\n                    this.config.count.html(label, this.config.count.classname, position)\n                );\n\n                // Store reference\n                this.elements.count = this.elements.trigger[isAfter ? 'nextSibling' : 'previousSibling'];\n            }\n        }\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     * @returns {Array}                                 An array of instances\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.string(target)) {\n            targets = Array.from(document.querySelectorAll(target));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const share = new Shr(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new Shr(t, options));\n    }\n}\n\nexport default Shr;\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","import is from '../utils/is';\n\n/**\n * Constants. These are uneditable by the user. These will get merged into\n * the global config after the user defaults so the user can't overwrite these\n * values.\n *\n * @typedef {Object} constants\n * @type {Object}\n *\n * @property {Object} facebook                 - The settings for Facebook within Shr.\n * @property {function} facebook.url          - The method that returns the API Url to get the share count for Facebook.\n * @property {function} facebook.shareCount   - The method that extracts the number we need from the data returned from the API for Facebook.\n *\n * @property {Object} twitter                 - The settings for Twitter within Shr.\n * @property {function} twitter.url           - The method that returns the API Url to get the share count for Twitter.\n * @property {function} twitter.shareCount    - The method that extracts the number we need from the data returned from the API for Twitter.\n *\n * @property {Object} pinterest               - The settings for Pinterest within Shr.\n * @property {function} pinterest.url         - The method that returns the API Url to get the share count for Pinterest.\n * @property {function} pinterest.shareCount  - The method that extracts the number we need from the data returned from the API for Pinterest.\n *\n * @property {Object} github                  - The settings for GitHub within Shr.\n * @property {function} github.url            - The method that returns the API Url to get the share count for GitHub.\n * @property {function} github.shareCount     - The method that extracts the number we need from the data returned from the API for GitHub.\n */\n\nconst constants = {\n    facebook: {\n        domain: 'facebook.com',\n        url: url => `https://graph.facebook.com/?id=${url}&fields=og_object{engagement}`,\n        shareCount: data => data.og_object.engagement.count,\n        popup: {\n            width: 640,\n            height: 360,\n        },\n    },\n\n    twitter: {\n        domain: 'twitter.com',\n        url: () => null,\n        shareCount: () => null,\n        popup: {\n            width: 640,\n            height: 240,\n        },\n    },\n\n    pinterest: {\n        domain: 'pinterest.com',\n        url: url => `https://widgets.pinterest.com/v1/urls/count.json?url=${url}`,\n        shareCount: data => data.count,\n        popup: {\n            width: 830,\n            height: 700,\n        },\n    },\n\n    github: {\n        domain: 'github.com',\n        url: (path, token) => `https://api.github.com/repos/${path}${is.string(token) ? `?access_token=${token}` : ''}`,\n        shareCount: data => data.data.stargazers_count,\n    },\n\n    youtube: {\n        domain: 'youtube.com',\n        url: (id, key) => `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${id}&key=${key}`,\n        shareCount: data => {\n            if (!is.empty(data.error)) {\n                return null;\n            }\n\n            const [first] = data.items;\n\n            if (is.empty(first)) {\n                return null;\n            }\n\n            return first.statistics.subscriberCount;\n        },\n    },\n};\n\nexport default constants;\n","/**\n     * Default Shr Config. All variables, settings and states are stored here\n     * and global. These are the defaults. The user can edit these at will when\n     * initializing Shr.\n     *\n     * @typedef {Object} defaults\n     * @type {Object}\n     *\n     * @property {Boolean}  debug                 - The flag for if we debug Shr or not. By defaul this is false.\n     * @property {String}   selector              - The base selector for the share link\n\n     * @property {Object}   count                 - The object containing the settings for the count.\n     * @property {String}   count.classname       - Classname for the share count.\n     * @property {Boolean}  count.displayZero     - Determines if we display zero values.\n     * @property {Boolean}  count.format          - Display 1000 as 1K, 1000000 as 1M, etc\n     * @property {String}   count.position        - Inject the count before or after the link in the DOM\n     * @property {Boolean}  count.increment       - Determines if we increment the count on click. This assumes the share is valid.\n     * @property {Function} count.html            - Formats the count for display on the screen.\n     *\n     * @property {Object}   google                - The object containing all configuration variables for Google.\n     * @property {Object}   google.popup          - The object containing the widths and heights for the Google popup window.\n     * @property {Number}   google.popup.width    - The width of the Google Popup window.\n     * @property {Number}   google.popup.height   - The height of the Google Popup window.\n     *\n     * @property {Object}   facebook              - The object containing all configuration variables for Facebook.\n     * @property {Object}   facebook.popup        - The object containing the widths and heights for the Facebook popup window.\n     * @property {Number}   facebook.popup.width  - The width of the Facebook Popup window.\n     * @property {Number}   facebook.popup.height - The height of the Facebook Popup window.\n     *\n     * @property {Object}   twitter                - The object containing all configuration variables for Twitter.\n     * @property {Object}   twitter.popup          - The object containing the widths and heights for the Twitter popup window.\n     * @property {Number}   twitter.popup.width    - The width of the Twitter Popup window.\n     * @property {Number}   twitter.popup.height   - The height of the Twitter Popup window.\n     *\n     * @property {Object}   pinterest              - The object containing all configuration variables for Pinterest.\n     * @property {Object}   pinterest.popup        - The object containing the widths and heights for the Pinterest popup window.\n     * @property {Number}   pinterest.popup.width  - The width of the Pinterest Popup window.\n     * @property {Number}   pinterest.popup.height - The height of the Pinterest Popup window.\n     *\n     * @property {Object}   tokens                 - The object containing authentication tokens.\n     * @property {Object}   tokens.github            The optional authentication tokens for GitHub (to prevent rate limiting).\n     * @property {String}   tokens.youtube           The public key you need to get the subscriber count for YouTube.\n     *\n     * @property {Object}   storage                - The object containing the settings for local storage.\n *     @property {Boolean}  storage.enabled       -  Determines if local storage is enabled for the browser or not.\n     * @property {String}   storage.key            - The key that the storage will use to access Shr data.\n     * @property {Number}   storage.ttl            - The time to live for the local storage values if available.\n     */\n\nconst defaults = {\n    debug: false,\n    count: {\n        classname: 'shr-count',\n        displayZero: true,\n        format: true,\n        position: 'after',\n        increment: true,\n        html: (count, classname, position) => `<span class=\"${classname} ${classname}--${position}\">${count}</span>`,\n    },\n    tokens: {\n        github: '',\n        youtube: '',\n    },\n    storage: {\n        enabled: true,\n        key: 'shr',\n        ttl: 300000,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        return this.enabled\n            ? Function.prototype.bind.call(console.log, console) // eslint-disable-line no-console\n            : noop;\n    }\n\n    get warn() {\n        return this.enabled\n            ? Function.prototype.bind.call(console.warn, console) // eslint-disable-line no-console\n            : noop;\n    }\n\n    get error() {\n        return this.enabled\n            ? Function.prototype.bind.call(console.error, console) // eslint-disable-line no-console\n            : noop;\n    }\n}\n","// ==========================================================================\n// Object utils\n// ==========================================================================\n\nimport is from './is';\n\n// Deep extend destination object with N more objects\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\nexport default {};\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport is from './is';\nimport { extend } from './objects';\n\nclass Storage {\n    constructor(key, ttl, enabled = true) {\n        this.enabled = enabled && Storage.supported;\n        this.key = key;\n        this.ttl = ttl;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (is.empty(store)) {\n            return null;\n        }\n\n        // Check TTL\n        const ttl = window.localStorage.getItem(`${this.key}_ttl`);\n\n        if (is.empty(ttl) || ttl < Date.now()) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        extend(storage, object);\n\n        // Update storage and TTL record\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n        window.localStorage.setItem(`${this.key}_ttl`, Date.now() + this.ttl);\n    }\n}\n\nexport default Storage;\n","/**\n * Makes the JSONP request to get the social network to get the share count.\n *\n * @param {string} url          - The URL of the of the sharing API.\n * @param {function} callback   - The callback funciton once the API completes the request.\n */\nexport function getJSONP(url) {\n    return new Promise((resolve, reject) => {\n        // Generate a random callback\n        const name = `jsonp_callback_${Math.round(100000 * Math.random())}`;\n\n        // Create a faux script\n        const script = document.createElement('script');\n\n        // Handle errors\n        script.addEventListener('error', error => reject(error));\n\n        // Cleanup to prevent memory leaks and hit original callback\n        window[name] = data => {\n            delete window[name];\n            document.body.removeChild(script);\n            resolve(data);\n        };\n\n        // Add callback to URL\n        const src = new URL(url);\n        src.searchParams.set('callback', name);\n\n        // Set src and load\n        script.setAttribute('src', src.toString());\n\n        // Inject to the body\n        document.body.appendChild(script);\n    });\n}\n\nexport default {};\n","export function formatNumber(number) {\n    // Work out whether decimal separator is . or , for localised numbers\n    const decimalSeparator = /\\./.test((1.1).toLocaleString()) ? '.' : ',';\n\n    // Round n to an integer and present\n    const regex = new RegExp(`\\\\${decimalSeparator}\\\\d+$`);\n\n    return Math.round(number)\n        .toLocaleString()\n        .replace(regex, '');\n}\n\nexport default {};\n","export function getDomain(href) {\n    const url = new URL(href);\n    let domain = url.hostname;\n    const parts = domain.split('.');\n    const { length } = parts;\n\n    // Extract the root domain\n    if (length > 2) {\n        domain = `${parts[length - 2]}.${parts[length - 1]}`;\n\n        // Check to see if it's using a Country Code Top Level Domain (ccTLD) (i.e. \".me.uk\")\n        if (parts[length - 2].length === 2 && parts[length - 1].length === 2) {\n            domain = `${parts[length - 3]}.${domain}`;\n        }\n    }\n\n    return domain;\n}\n\nexport default {};\n","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default {};\n"]}