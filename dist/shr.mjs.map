{"version":3,"sources":["src/js/shr.js","src/js/utils/is.js","src/js/config/constants.js","src/js/config/defaults.js","src/js/utils/ajax.js","src/js/utils/console.js","src/js/utils/css.js","src/js/utils/numbers.js","src/js/utils/objects.js","src/js/utils/storage.js","src/js/utils/urls.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isNodeList","NodeList","isElement","Element","isEvent","Event","isEmpty","keys","is","nullOrUndefined","object","number","string","boolean","function","array","nodeList","element","event","empty","constants","facebook","domain","url","concat","shareCount","data","share","share_count","popup","width","height","twitter","pinterest","count","github","path","token","stargazers_count","youtube","id","error","first","items","statistics","subscriberCount","defaults","debug","classname","displayZero","format","position","increment","html","tokens","storage","enabled","ttl","getJSONP","Promise","resolve","reject","name","Math","round","random","script","document","createElement","addEventListener","window","body","removeChild","src","URL","searchParams","set","setAttribute","toString","appendChild","noop","Console","a","arguments","this","console","log","get","bind","call","warn","matches","selector","from","querySelectorAll","includes","formatNumber","decimalSeparator","test","toLocaleString","regex","RegExp","replace","extend","b","sources","d","source","shift","forEach","assign","apply","Storage","supported","store","localStorage","getItem","Date","now","json","JSON","parse","setItem","stringify","removeItem","e","getDomain","href","hostname","parts","split","Shr","options","elements","trigger","querySelector","shr","config","networks","getCount","then","updateDisplay","catch","listeners","method","openPopup","network","networkConfig","preventDefault","size","closed","focus","left","screenLeft","screen","top","screenTop","x","y","open","useCache","apiUrl","Error","cached","custom","getAttribute","parseInt","toLowerCase","label","isAfter","textContent","insertAdjacentHTML","find","n","pathname","substring","pop","encodeURIComponent","targets","filter","watch","MutationObserver","mutations","mutation","addedNodes","node","observe","childList","subtree","map","t"],"mappings":"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","file":"shr.mjs","sourcesContent":["/**\n * @name    Shr.js\n * @version 2.0.0-beta.1\n * @author \tSam Potts\n * @license The MIT License (MIT)\n */\n\nimport constants from './config/constants';\nimport defaults from './config/defaults';\nimport { getJSONP } from './utils/ajax';\nimport Console from './utils/console';\nimport { matches } from './utils/css';\nimport is from './utils/is';\nimport { formatNumber } from './utils/numbers';\nimport { extend } from './utils/objects';\nimport Storage from './utils/storage';\nimport { getDomain } from './utils/urls';\n\nclass Shr {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        this.elements = {\n            count: null,\n            trigger: null,\n            popup: null,\n        };\n\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.elements.trigger = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.elements.trigger = document.querySelector(target);\n        }\n\n        if (!is.element(this.elements.trigger) || !is.empty(this.elements.trigger.shr)) {\n            return;\n        }\n\n        this.config = extend({}, defaults, options, { networks: constants });\n\n        this.console = new Console(this.config.debug);\n\n        this.storage = new Storage(this.config.storage.key, this.config.storage.ttl, this.config.storage.enabled);\n\n        this.getCount()\n            .then(data => this.updateDisplay(data))\n            .catch(() => {});\n\n        this.listeners(true);\n\n        this.elements.trigger.shr = this;\n    }\n\n    /**\n     * Destroy the current instance\n     * @returns {Void}\n     */\n    destroy() {\n        this.listeners(false);\n\n        // TODO: Remove the count\n    }\n\n    /**\n     * Setup event listeners\n     * @returns {Void}\n     */\n    listeners(toggle = false) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        this.elements.trigger[method]('click', event => this.share(event), false);\n    }\n\n    /**\n     * Gets the href from the trigger link\n     * @returns {String}    The href attribute from the link\n     */\n    get href() {\n        if (!is.element(this.elements.trigger)) {\n            return null;\n        }\n\n        return this.elements.trigger.href;\n    }\n\n    /**\n     * Gets the network for this instance\n     * @returns {String}    The network name in lowercase\n     */\n    get network() {\n        if (!is.element(this.elements.trigger)) {\n            return null;\n        }\n\n        const { networks } = this.config;\n\n        return Object.keys(networks).find(n => getDomain(this.href) === networks[n].domain);\n    }\n\n    /**\n     * Gets the config for the specified network\n     * @returns {Object}    The config options\n     */\n    get networkConfig() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        return this.config.networks[this.network];\n    }\n\n    /**\n     * Gets the URL or ID we are geting the share count for\n     * @returns {String}    The target ID or URL we're sharing\n     */\n    get target() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        const url = new URL(this.href);\n\n        switch (this.network) {\n            case 'facebook':\n                return url.searchParams.get('u');\n\n            case 'github':\n                return url.pathname.substring(1);\n\n            case 'youtube':\n                return url.pathname.split('/').pop();\n\n            default:\n                return url.searchParams.get('url');\n        }\n    }\n\n    /**\n     * Gets for the URL for the JSONP endpoint\n     * @returns {String}    The URL for the JSONP endpoint\n     */\n    get apiUrl() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        const { tokens } = this.config;\n\n        switch (this.network) {\n            case 'github':\n                return this.networkConfig.url(this.target, tokens.github);\n\n            case 'youtube':\n                return this.networkConfig.url(this.target, tokens.youtube);\n\n            default:\n                return this.networkConfig.url(encodeURIComponent(this.target));\n        }\n    }\n\n    /**\n     * Initiate the share process\n     * This must be user triggered or the popup will be blocked\n     * @param {Event} event     The user input event\n     * @returns {Void}\n     */\n    share(event) {\n        this.openPopup(event);\n\n        this.getCount()\n            .then(data => this.updateDisplay(data, this.config.increment))\n            .catch(() => {});\n    }\n\n    /**\n     * Displays a pop up window to share on the requested social network.\n     * @param {Event} event   - Event that triggered the popup window.\n     * @returns {Void}\n     */\n    openPopup(event) {\n        if (!is.event(event)) {\n            return;\n        }\n\n        // Only popup if we need to...\n        if (is.empty(this.network) || !this.networkConfig.popup) {\n            return;\n        }\n\n        // Prevent the link opening\n        event.preventDefault();\n\n        // Set variables for the popup\n        const size = this.networkConfig.popup;\n        const { width, height } = size;\n        const name = `shr-popup--${this.network}`;\n\n        // If window already exists, just focus it\n        if (this.popup && !this.popup.closed) {\n            this.popup.focus();\n\n            this.console.log('Popup re-focused.');\n        } else {\n            // Get position\n            const left = window.screenLeft !== undefined ? window.screenLeft : window.screen.left;\n            const top = window.screenTop !== undefined ? window.screenTop : window.screen.top;\n\n            // Open in the centre of the screen\n            const x = window.screen.width / 2 - width / 2 + left;\n            const y = window.screen.height / 2 - height / 2 + top;\n\n            // Open that window\n            this.popup = window.open(this.href, name, `top=${y},left=${x},width=${width},height=${height}`);\n\n            // Determine if the popup was blocked\n            const blocked = !this.popup || this.popup.closed || !is.boolean(this.popup.closed);\n\n            // Focus new window\n            if (!blocked) {\n                this.popup.focus();\n\n                // Nullify opener to prevent \"tab nabbing\"\n                // https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/\n                // this.popup.opener = null;\n\n                this.console.log('Popup opened.');\n            } else {\n                this.console.error('Popup blocked.');\n            }\n        }\n    }\n\n    /**\n     * Get the count for the url from API\n     * @param {Boolean} useCache        Whether to use the local storage cache or not\n     * @returns {Promise}\n     */\n    getCount(useCache = true) {\n        return new Promise((resolve, reject) => {\n            // Format the JSONP endpoint\n            const url = this.apiUrl;\n\n            // If there's an endpoint. For some social networks, you can't\n            // get the share count (like Twitter) so we won't have any data. The link\n            // will be to share it, but you won't get a count of how many people have.\n\n            if (is.empty(url)) {\n                reject(new Error(`No URL available for ${this.network}.`));\n                return;\n            }\n\n            // Check cache first\n            if (useCache) {\n                const cached = this.storage.get(this.target);\n\n                if (!is.empty(cached) && Object.keys(cached).includes(this.network)) {\n                    resolve(cached[this.network]);\n                    this.console.log('getCount resolved from cache.');\n                    return;\n                }\n            }\n\n            // When we get here, this means the cached counts are not valid,\n            // or don't exist. We will call the API if the URL is available\n            // at this point.\n\n            // Runs a GET request on the URL\n            getJSONP(url)\n                .then(data => {\n                    let count = 0;\n                    const custom = this.elements.trigger.getAttribute('data-shr-display');\n\n                    // Get value based on config\n                    if (!is.empty(custom)) {\n                        count = data[custom];\n                    } else {\n                        count = this.networkConfig.shareCount(data);\n                    }\n\n                    // Default to zero for undefined\n                    if (is.empty(count)) {\n                        count = 0;\n                    }\n\n                    // Parse\n                    count = parseInt(count, 10);\n\n                    // Cache in local storage\n                    this.storage.set({\n                        [this.target]: {\n                            [this.network]: count,\n                        },\n                    });\n\n                    resolve(count);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Display the count\n     * @param {Number} input         - The count returned from the share count API\n     * @param {Boolean} increment   -  Determines if we should increment the count or not\n     * @returns {Void}\n     */\n    updateDisplay(input, increment = false) {\n        // If we're incrementing (e.g. on click)\n        const count = increment ? input + 1 : input;\n\n        // Standardize position\n        const position = this.config.count.position.toLowerCase();\n\n        // Only display if there's a count\n        if (count > 0 || this.config.count.displayZero) {\n            const isAfter = position === 'after';\n\n            // Format\n            let label;\n            if (this.config.count.format && count > 1000000) {\n                label = `${Math.round(count / 1000000)}M`;\n            } else if (this.config.count.format && count > 1000) {\n                label = `${Math.round(count / 1000)}K`;\n            } else {\n                label = formatNumber(count);\n            }\n\n            // Update or insert\n            if (is.element(this.elements.count)) {\n                this.elements.count.textContent = label;\n            } else {\n                // Insert count display\n                this.elements.trigger.insertAdjacentHTML(\n                    isAfter ? 'afterend' : 'beforebegin',\n                    this.config.count.html(label, this.config.count.classname, position)\n                );\n\n                // Store reference\n                this.elements.count = this.elements.trigger[isAfter ? 'nextSibling' : 'previousSibling'];\n            }\n        }\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     * @returns {Array}                                 An array of instances\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.string(target)) {\n            targets = Array.from(document.querySelectorAll(target));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const share = new Shr(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new Shr(t, options));\n    }\n}\n\nexport default Shr;\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","import is from '../utils/is';\n\n/**\n * Constants. These are uneditable by the user. These will get merged into\n * the global config after the user defaults so the user can't overwrite these\n * values.\n *\n * @typedef {Object} constants\n * @type {Object}\n *\n * @property {Object} facebook                 - The settings for Facebook within Shr.\n * @property {function} facebook.url          - The method that returns the API Url to get the share count for Facebook.\n * @property {function} facebook.shareCount   - The method that extracts the number we need from the data returned from the API for Facebook.\n *\n * @property {Object} twitter                 - The settings for Twitter within Shr.\n * @property {function} twitter.url           - The method that returns the API Url to get the share count for Twitter.\n * @property {function} twitter.shareCount    - The method that extracts the number we need from the data returned from the API for Twitter.\n *\n * @property {Object} pinterest               - The settings for Pinterest within Shr.\n * @property {function} pinterest.url         - The method that returns the API Url to get the share count for Pinterest.\n * @property {function} pinterest.shareCount  - The method that extracts the number we need from the data returned from the API for Pinterest.\n *\n * @property {Object} github                  - The settings for GitHub within Shr.\n * @property {function} github.url            - The method that returns the API Url to get the share count for GitHub.\n * @property {function} github.shareCount     - The method that extracts the number we need from the data returned from the API for GitHub.\n */\n\nconst constants = {\n    facebook: {\n        domain: 'facebook.com',\n        url: url => `https://graph.facebook.com/?id=${url}`,\n        shareCount: data => data.share.share_count,\n        popup: {\n            width: 640,\n            height: 360,\n        },\n    },\n\n    twitter: {\n        domain: 'twitter.com',\n        url: () => null,\n        shareCount: () => null,\n        popup: {\n            width: 640,\n            height: 240,\n        },\n    },\n\n    pinterest: {\n        domain: 'pinterest.com',\n        url: url => `https://widgets.pinterest.com/v1/urls/count.json?url=${url}`,\n        shareCount: data => data.count,\n        popup: {\n            width: 830,\n            height: 700,\n        },\n    },\n\n    github: {\n        domain: 'github.com',\n        url: (path, token) => `https://api.github.com/repos/${path}${is.string(token) ? `?access_token=${token}` : ''}`,\n        shareCount: data => data.data.stargazers_count,\n    },\n\n    youtube: {\n        domain: 'youtube.com',\n        url: (id, key) => `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${id}&key=${key}`,\n        shareCount: data => {\n            if (!is.empty(data.error)) {\n                return null;\n            }\n\n            const [first] = data.items;\n\n            if (is.empty(first)) {\n                return null;\n            }\n\n            return first.statistics.subscriberCount;\n        },\n    },\n};\n\nexport default constants;\n","/**\n     * Default Shr Config. All variables, settings and states are stored here\n     * and global. These are the defaults. The user can edit these at will when\n     * initializing Shr.\n     *\n     * @typedef {Object} defaults\n     * @type {Object}\n     *\n     * @property {Boolean}  debug                 - The flag for if we debug Shr or not. By defaul this is false.\n     * @property {String}   selector              - The base selector for the share link\n\n     * @property {Object}   count                 - The object containing the settings for the count.\n     * @property {String}   count.classname       - Classname for the share count.\n     * @property {Boolean}  count.displayZero     - Determines if we display zero values.\n     * @property {Boolean}  count.format          - Display 1000 as 1K, 1000000 as 1M, etc\n     * @property {String}   count.position        - Inject the count before or after the link in the DOM\n     * @property {Boolean}  count.increment       - Determines if we increment the count on click. This assumes the share is valid.\n     * @property {Function} count.html            - Formats the count for display on the screen.\n     *\n     * @property {Object}   google                - The object containing all configuration variables for Google.\n     * @property {Object}   google.popup          - The object containing the widths and heights for the Google popup window.\n     * @property {Number}   google.popup.width    - The width of the Google Popup window.\n     * @property {Number}   google.popup.height   - The height of the Google Popup window.\n     *\n     * @property {Object}   facebook              - The object containing all configuration variables for Facebook.\n     * @property {Object}   facebook.popup        - The object containing the widths and heights for the Facebook popup window.\n     * @property {Number}   facebook.popup.width  - The width of the Facebook Popup window.\n     * @property {Number}   facebook.popup.height - The height of the Facebook Popup window.\n     *\n     * @property {Object}   twitter                - The object containing all configuration variables for Twitter.\n     * @property {Object}   twitter.popup          - The object containing the widths and heights for the Twitter popup window.\n     * @property {Number}   twitter.popup.width    - The width of the Twitter Popup window.\n     * @property {Number}   twitter.popup.height   - The height of the Twitter Popup window.\n     *\n     * @property {Object}   pinterest              - The object containing all configuration variables for Pinterest.\n     * @property {Object}   pinterest.popup        - The object containing the widths and heights for the Pinterest popup window.\n     * @property {Number}   pinterest.popup.width  - The width of the Pinterest Popup window.\n     * @property {Number}   pinterest.popup.height - The height of the Pinterest Popup window.\n     *\n     * @property {Object}   tokens                 - The object containing authentication tokens.\n     * @property {Object}   tokens.github            The optional authentication tokens for GitHub (to prevent rate limiting).\n     * @property {String}   tokens.youtube           The public key you need to get the subscriber count for YouTube.\n     *\n     * @property {Object}   storage                - The object containing the settings for local storage.\n *     @property {Boolean}  storage.enabled       -  Determines if local storage is enabled for the browser or not.\n     * @property {String}   storage.key            - The key that the storage will use to access Shr data.\n     * @property {Number}   storage.ttl            - The time to live for the local storage values if available.\n     */\n\nconst defaults = {\n    debug: false,\n    count: {\n        classname: 'shr-count',\n        displayZero: true,\n        format: true,\n        position: 'after',\n        increment: true,\n        html: (count, classname, position) => `<span class=\"${classname} ${classname}--${position}\">${count}</span>`,\n    },\n    tokens: {\n        github: '',\n        youtube: '',\n    },\n    storage: {\n        enabled: true,\n        key: 'shr',\n        ttl: 300000,\n    },\n};\n\nexport default defaults;\n","/**\n * Makes the JSONP request to get the social network to get the share count.\n *\n * @param {string} url          - The URL of the of the sharing API.\n * @param {function} callback   - The callback funciton once the API completes the request.\n */\nexport function getJSONP(url) {\n    return new Promise((resolve, reject) => {\n        // Generate a random callback\n        const name = `jsonp_callback_${Math.round(100000 * Math.random())}`;\n\n        // Create a faux script\n        const script = document.createElement('script');\n\n        // Handle errors\n        script.addEventListener('error', error => reject(error));\n\n        // Cleanup to prevent memory leaks and hit original callback\n        window[name] = data => {\n            delete window[name];\n            document.body.removeChild(script);\n            resolve(data);\n        };\n\n        // Add callback to URL\n        const src = new URL(url);\n        src.searchParams.set('callback', name);\n\n        // Set src and load\n        script.setAttribute('src', src.toString());\n\n        // Inject to the body\n        document.body.appendChild(script);\n    });\n}\n\nexport default {};\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default {};\n","export function formatNumber(number) {\n    // Work out whether decimal separator is . or , for localised numbers\n    const decimalSeparator = /\\./.test((1.1).toLocaleString()) ? '.' : ',';\n\n    // Round n to an integer and present\n    const regex = new RegExp(`\\\\${decimalSeparator}\\\\d+$`);\n\n    return Math.round(number)\n        .toLocaleString()\n        .replace(regex, '');\n}\n\nexport default {};\n","// ==========================================================================\n// Object utils\n// ==========================================================================\n\nimport is from './is';\n\n// Deep extend destination object with N more objects\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\nexport default {};\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport is from './is';\nimport { extend } from './objects';\n\nclass Storage {\n    constructor(key, ttl, enabled = true) {\n        this.enabled = enabled && Storage.supported;\n        this.key = key;\n        this.ttl = ttl;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (is.empty(store)) {\n            return null;\n        }\n\n        // Check TTL\n        const ttl = window.localStorage.getItem(`${this.key}_ttl`);\n\n        if (is.empty(ttl) || ttl < Date.now()) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        extend(storage, object);\n\n        // Update storage and TTL record\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n        window.localStorage.setItem(`${this.key}_ttl`, Date.now() + this.ttl);\n    }\n}\n\nexport default Storage;\n","export function getDomain(href) {\n    const url = new URL(href);\n    let domain = url.hostname;\n    const parts = domain.split('.');\n    const { length } = parts;\n\n    // Extract the root domain\n    if (length > 2) {\n        domain = `${parts[length - 2]}.${parts[length - 1]}`;\n\n        // Check to see if it's using a Country Code Top Level Domain (ccTLD) (i.e. \".me.uk\")\n        if (parts[length - 2].length === 2 && parts[length - 1].length === 2) {\n            domain = `${parts[length - 3]}.${domain}`;\n        }\n    }\n\n    return domain;\n}\n\nexport default {};\n"]}