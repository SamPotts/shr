{"version":3,"sources":["demo/src/js/app.js","src/js/utils/is.js","src/js/config/constants.js","src/js/config/defaults.js","src/js/utils/console.js","src/js/utils/elements.js","src/js/utils/objects.js","src/js/utils/storage.js","src/js/shr.js","src/js/utils/ajax.js","src/js/utils/numbers.js","src/js/utils/urls.js","src/js/utils/css.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","isString","String","isNodeList","NodeList","is","nullOrUndefined","object","number","Number","isNaN","string","boolean","Boolean","function","Function","array","nodeList","element","Element","event","Event","empty","keys","constants","facebook","domain","url","concat","shareCount","data","og_object","engagement","count","popup","width","height","twitter","pinterest","github","path","token","stargazers_count","youtube","id","error","first","items","statistics","subscriberCount","defaults","debug","wrapper","className","displayZero","format","position","increment","tokens","storage","enabled","ttl","noop","Console","a","arguments","this","window","console","log","get","bind","call","warn","createElement","type","attributes","text","document","entries","filter","forEach","b","c","setAttribute","setAttributes","innerText","extend","sources","d","source","shift","includes","assign","apply","Storage","supported","store","localStorage","getItem","Date","now","json","JSON","parse","setItem","stringify","removeItem","e","Shr","options","elements","trigger","querySelector","shr","config","networks","getCount","then","updateDisplay","catch","listeners","method","share","openPopup","network","networkConfig","preventDefault","size","name","closed","focus","left","screenLeft","screen","top","screenTop","x","y","open","href","useCache","Promise","resolve","reject","apiUrl","Error","cached","Math","round","random","script","addEventListener","body","removeChild","src","URL","searchParams","set","toString","appendChild","getJSONP","custom","getAttribute","parseInt","toLowerCase","label","unit","decimalSeparator","test","toLocaleString","regex","RegExp","replace","formatNumber","textContent","g","targets","from","reverse","index","child","cloneNode","parent","parentNode","sibling","nextSibling","insertBefore","wrap","class","insertAdjacentElement","find","n","hostname","parts","split","getDomain","pathname","substring","pop","encodeURIComponent","querySelectorAll","watch","MutationObserver","mutations","mutation","addedNodes","node","selector","matches","observe","childList","subtree","map","t","setup"],"mappings":"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","file":"app.js","sourcesContent":["// ==========================================================================\n// Docs example\n// ==========================================================================\n\nimport Shr from '../../../src/js/shr';\n\nShr.setup('.js-shr', {\n    debug: true,\n    tokens: {\n        youtube: 'AIzaSyDrNwtN3nLH_8rjCmu5Wq3ZCm4MNAVdc0c',\n    },\n});\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","import is from '../utils/is';\n\n/**\n * Constants. These are uneditable by the user. These will get merged into\n * the global config after the user defaults so the user can't overwrite these\n * values.\n *\n * @typedef {Object} constants\n * @type {Object}\n *\n * @property {Object} facebook                 - The settings for Facebook within Shr.\n * @property {function} facebook.url          - The method that returns the API Url to get the share count for Facebook.\n * @property {function} facebook.shareCount   - The method that extracts the number we need from the data returned from the API for Facebook.\n *\n * @property {Object} twitter                 - The settings for Twitter within Shr.\n * @property {function} twitter.url           - The method that returns the API Url to get the share count for Twitter.\n * @property {function} twitter.shareCount    - The method that extracts the number we need from the data returned from the API for Twitter.\n *\n * @property {Object} pinterest               - The settings for Pinterest within Shr.\n * @property {function} pinterest.url         - The method that returns the API Url to get the share count for Pinterest.\n * @property {function} pinterest.shareCount  - The method that extracts the number we need from the data returned from the API for Pinterest.\n *\n * @property {Object} github                  - The settings for GitHub within Shr.\n * @property {function} github.url            - The method that returns the API Url to get the share count for GitHub.\n * @property {function} github.shareCount     - The method that extracts the number we need from the data returned from the API for GitHub.\n */\n\nconst constants = {\n    facebook: {\n        domain: 'facebook.com',\n        url: url => `https://graph.facebook.com/?id=${url}&fields=og_object{engagement}`,\n        shareCount: data => data.og_object.engagement.count,\n        popup: {\n            width: 640,\n            height: 360,\n        },\n    },\n\n    twitter: {\n        domain: 'twitter.com',\n        url: () => null,\n        shareCount: () => null,\n        popup: {\n            width: 640,\n            height: 240,\n        },\n    },\n\n    pinterest: {\n        domain: 'pinterest.com',\n        url: url => `https://widgets.pinterest.com/v1/urls/count.json?url=${url}`,\n        shareCount: data => data.count,\n        popup: {\n            width: 830,\n            height: 700,\n        },\n    },\n\n    github: {\n        domain: 'github.com',\n        url: (path, token) => `https://api.github.com/repos/${path}${is.string(token) ? `?access_token=${token}` : ''}`,\n        shareCount: data => data.data.stargazers_count,\n    },\n\n    youtube: {\n        domain: 'youtube.com',\n        url: (id, key) => `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${id}&key=${key}`,\n        shareCount: data => {\n            if (!is.empty(data.error)) {\n                return null;\n            }\n\n            const [first] = data.items;\n\n            if (is.empty(first)) {\n                return null;\n            }\n\n            return first.statistics.subscriberCount;\n        },\n    },\n};\n\nexport default constants;\n","/**\n     * Default Shr Config. All variables, settings and states are stored here\n     * and global. These are the defaults. The user can edit these at will when\n     * initializing Shr.\n     *\n     * @typedef {Object} defaults\n     * @type {Object}\n     *\n     * @property {Boolean}  debug                 - The flag for if we debug Shr or not. By defaul this is false.\n     * @property {String}   selector              - The base selector for the share link\n\n     * @property {Object}   count                 - The object containing the settings for the count.\n     * @property {String}   count.classname       - Classname for the share count.\n     * @property {Boolean}  count.displayZero     - Determines if we display zero values.\n     * @property {Boolean}  count.format          - Display 1000 as 1K, 1000000 as 1M, etc\n     * @property {String}   count.position        - Inject the count before or after the link in the DOM\n     * @property {Boolean}  count.increment       - Determines if we increment the count on click. This assumes the share is valid.\n     * @property {Function} count.html            - Formats the count for display on the screen.\n     *\n     * @property {Object}   google                - The object containing all configuration variables for Google.\n     * @property {Object}   google.popup          - The object containing the widths and heights for the Google popup window.\n     * @property {Number}   google.popup.width    - The width of the Google Popup window.\n     * @property {Number}   google.popup.height   - The height of the Google Popup window.\n     *\n     * @property {Object}   facebook              - The object containing all configuration variables for Facebook.\n     * @property {Object}   facebook.popup        - The object containing the widths and heights for the Facebook popup window.\n     * @property {Number}   facebook.popup.width  - The width of the Facebook Popup window.\n     * @property {Number}   facebook.popup.height - The height of the Facebook Popup window.\n     *\n     * @property {Object}   twitter                - The object containing all configuration variables for Twitter.\n     * @property {Object}   twitter.popup          - The object containing the widths and heights for the Twitter popup window.\n     * @property {Number}   twitter.popup.width    - The width of the Twitter Popup window.\n     * @property {Number}   twitter.popup.height   - The height of the Twitter Popup window.\n     *\n     * @property {Object}   pinterest              - The object containing all configuration variables for Pinterest.\n     * @property {Object}   pinterest.popup        - The object containing the widths and heights for the Pinterest popup window.\n     * @property {Number}   pinterest.popup.width  - The width of the Pinterest Popup window.\n     * @property {Number}   pinterest.popup.height - The height of the Pinterest Popup window.\n     *\n     * @property {Object}   tokens                 - The object containing authentication tokens.\n     * @property {Object}   tokens.github            The optional authentication tokens for GitHub (to prevent rate limiting).\n     * @property {String}   tokens.youtube           The public key you need to get the subscriber count for YouTube.\n     *\n     * @property {Object}   storage                - The object containing the settings for local storage.\n *     @property {Boolean}  storage.enabled       -  Determines if local storage is enabled for the browser or not.\n     * @property {String}   storage.key            - The key that the storage will use to access Shr data.\n     * @property {Number}   storage.ttl            - The time to live for the local storage values if available.\n     */\n\nconst defaults = {\n    debug: false,\n    wrapper: {\n        className: 'shr',\n    },\n    count: {\n        className: 'shr__count',\n        displayZero: true,\n        format: true,\n        position: 'after',\n        increment: true,\n    },\n    tokens: {\n        github: '',\n        youtube: '',\n    },\n    storage: {\n        enabled: true,\n        key: 'shr',\n        ttl: 300000,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        return this.enabled\n            ? Function.prototype.bind.call(console.log, console) // eslint-disable-line no-console\n            : noop;\n    }\n\n    get warn() {\n        return this.enabled\n            ? Function.prototype.bind.call(console.warn, console) // eslint-disable-line no-console\n            : noop;\n    }\n\n    get error() {\n        return this.enabled\n            ? Function.prototype.bind.call(console.error, console) // eslint-disable-line no-console\n            : noop;\n    }\n}\n","import is from './is';\n\n/**\n * Wrap one or more HTMLElement in wrapper container\n * @param {HTMLElement[]} elements\n * @param {HTMLElement} wrapper\n * @returns {Void}\n */\nexport function wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    const targets = elements.length ? elements : [elements];\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    Array.from(targets)\n        .reverse()\n        .forEach((element, index) => {\n            const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n            // Cache the current parent and sibling.\n            const parent = element.parentNode;\n            const sibling = element.nextSibling;\n\n            // Wrap the element (is automatically removed from its current\n            // parent).\n            child.appendChild(element);\n\n            // If the element had a sibling, insert the wrapper before\n            // the sibling to maintain the HTML structure; otherwise, just\n            // append it to the parent.\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n        });\n}\n\n/**\n * Set HTMLElement attributes\n * @param {HTMLElement} element\n * @param {Object} attributes\n * @returns {Void}\n */\nexport function setAttributes(element, attributes) {\n    if (!is.element(element) || is.empty(attributes)) {\n        return;\n    }\n\n    // Assume null and undefined attributes should be left out,\n    // Setting them would otherwise convert them to \"null\" and \"undefined\"\n    Object.entries(attributes)\n        .filter(([, value]) => !is.nullOrUndefined(value))\n        .forEach(([key, value]) => element.setAttribute(key, value));\n}\n\n/**\n * Create a HTMLElement\n * @param {String} type - Type of element to create\n * @param {Object} attributes - Object of HTML attributes\n * @param {String} text - Sets the text content\n * @returns {HTMLElement}\n */\nexport function createElement(type, attributes, text) {\n    // Create a new <element>\n    const element = document.createElement(type);\n\n    // Set all passed attributes\n    if (is.object(attributes)) {\n        setAttributes(element, attributes);\n    }\n\n    // Add text node\n    if (is.string(text)) {\n        element.innerText = text;\n    }\n\n    // Return built element\n    return element;\n}\n\nexport default { wrap };\n","// ==========================================================================\n// Object utils\n// ==========================================================================\n\nimport is from './is';\n\n// Deep extend destination object with N more objects\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\nexport default { extend };\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport is from './is';\nimport { extend } from './objects';\n\nclass Storage {\n    constructor(key, ttl, enabled = true) {\n        this.enabled = enabled && Storage.supported;\n        this.key = key;\n        this.ttl = ttl;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (is.empty(store)) {\n            return null;\n        }\n\n        // Check TTL\n        const ttl = window.localStorage.getItem(`${this.key}_ttl`);\n\n        if (is.empty(ttl) || ttl < Date.now()) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        extend(storage, object);\n\n        // Update storage and TTL record\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n        window.localStorage.setItem(`${this.key}_ttl`, Date.now() + this.ttl);\n    }\n}\n\nexport default Storage;\n","/**\n * @name    Shr.js\n * @version 2.0.0-beta.1\n * @author \tSam Potts\n * @license The MIT License (MIT)\n */\n\nimport constants from './config/constants';\nimport defaults from './config/defaults';\nimport { getJSONP } from './utils/ajax';\nimport Console from './utils/console';\nimport { matches } from './utils/css';\nimport { createElement, wrap } from './utils/elements';\nimport is from './utils/is';\nimport { formatNumber } from './utils/numbers';\nimport { extend } from './utils/objects';\nimport Storage from './utils/storage';\nimport { getDomain } from './utils/urls';\n\nclass Shr {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        this.elements = {\n            count: null,\n            trigger: null,\n            popup: null,\n        };\n\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.elements.trigger = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.elements.trigger = document.querySelector(target);\n        }\n\n        if (!is.element(this.elements.trigger) || !is.empty(this.elements.trigger.shr)) {\n            return;\n        }\n\n        this.config = extend({}, defaults, options, { networks: constants });\n\n        this.console = new Console(this.config.debug);\n\n        this.storage = new Storage(this.config.storage.key, this.config.storage.ttl, this.config.storage.enabled);\n\n        this.getCount()\n            .then(data => this.updateDisplay(data))\n            .catch(() => {});\n\n        this.listeners(true);\n\n        this.elements.trigger.shr = this;\n    }\n\n    /**\n     * Destroy the current instance\n     * @returns {Void}\n     */\n    destroy() {\n        this.listeners(false);\n\n        // TODO: Remove the count and unwrap\n    }\n\n    /**\n     * Setup event listeners\n     * @returns {Void}\n     */\n    listeners(toggle = false) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        this.elements.trigger[method]('click', event => this.share(event), false);\n    }\n\n    /**\n     * Gets the href from the trigger link\n     * @returns {String}    The href attribute from the link\n     */\n    get href() {\n        if (!is.element(this.elements.trigger)) {\n            return null;\n        }\n\n        return this.elements.trigger.href;\n    }\n\n    /**\n     * Gets the network for this instance\n     * @returns {String}    The network name in lowercase\n     */\n    get network() {\n        if (!is.element(this.elements.trigger)) {\n            return null;\n        }\n\n        const { networks } = this.config;\n\n        return Object.keys(networks).find(n => getDomain(this.href) === networks[n].domain);\n    }\n\n    /**\n     * Gets the config for the specified network\n     * @returns {Object}    The config options\n     */\n    get networkConfig() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        return this.config.networks[this.network];\n    }\n\n    /**\n     * Gets the URL or ID we are geting the share count for\n     * @returns {String}    The target ID or URL we're sharing\n     */\n    get target() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        const url = new URL(this.href);\n\n        switch (this.network) {\n            case 'facebook':\n                return url.searchParams.get('u');\n\n            case 'github':\n                return url.pathname.substring(1);\n\n            case 'youtube':\n                return url.pathname.split('/').pop();\n\n            default:\n                return url.searchParams.get('url');\n        }\n    }\n\n    /**\n     * Gets for the URL for the JSONP endpoint\n     * @returns {String}    The URL for the JSONP endpoint\n     */\n    get apiUrl() {\n        if (is.empty(this.network)) {\n            return null;\n        }\n\n        const { tokens } = this.config;\n\n        switch (this.network) {\n            case 'github':\n                return this.networkConfig.url(this.target, tokens.github);\n\n            case 'youtube':\n                return this.networkConfig.url(this.target, tokens.youtube);\n\n            default:\n                return this.networkConfig.url(encodeURIComponent(this.target));\n        }\n    }\n\n    /**\n     * Initiate the share process\n     * This must be user triggered or the popup will be blocked\n     * @param {Event} event     The user input event\n     * @returns {Void}\n     */\n    share(event) {\n        this.openPopup(event);\n\n        this.getCount()\n            .then(data => this.updateDisplay(data, this.config.increment))\n            .catch(() => {});\n    }\n\n    /**\n     * Displays a pop up window to share on the requested social network.\n     * @param {Event} event   - Event that triggered the popup window.\n     * @returns {Void}\n     */\n    openPopup(event) {\n        // Only popup if we need to...\n        if (is.empty(this.network) || !this.networkConfig.popup) {\n            return;\n        }\n\n        // Prevent the link opening\n        if (is.event(event)) {\n            event.preventDefault();\n        }\n\n        // Set variables for the popup\n        const size = this.networkConfig.popup;\n        const { width, height } = size;\n        const name = `shr-popup--${this.network}`;\n\n        // If window already exists, just focus it\n        if (this.popup && !this.popup.closed) {\n            this.popup.focus();\n\n            this.console.log('Popup re-focused.');\n        } else {\n            // Get position\n            const left = window.screenLeft !== undefined ? window.screenLeft : window.screen.left;\n            const top = window.screenTop !== undefined ? window.screenTop : window.screen.top;\n\n            // Open in the centre of the screen\n            const x = window.screen.width / 2 - width / 2 + left;\n            const y = window.screen.height / 2 - height / 2 + top;\n\n            // Open that window\n            this.popup = window.open(this.href, name, `top=${y},left=${x},width=${width},height=${height}`);\n\n            // Determine if the popup was blocked\n            const blocked = !this.popup || this.popup.closed || !is.boolean(this.popup.closed);\n\n            // Focus new window\n            if (!blocked) {\n                this.popup.focus();\n\n                // Nullify opener to prevent \"tab nabbing\"\n                // https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/\n                // this.popup.opener = null;\n\n                this.console.log('Popup opened.');\n            } else {\n                this.console.error('Popup blocked.');\n            }\n        }\n    }\n\n    /**\n     * Get the count for the url from API\n     * @param {Boolean} useCache        Whether to use the local storage cache or not\n     * @returns {Promise}\n     */\n    getCount(useCache = true) {\n        return new Promise((resolve, reject) => {\n            // Format the JSONP endpoint\n            const url = this.apiUrl;\n\n            // If there's an endpoint. For some social networks, you can't\n            // get the share count (like Twitter) so we won't have any data. The link\n            // will be to share it, but you won't get a count of how many people have.\n\n            if (is.empty(url)) {\n                reject(new Error(`No URL available for ${this.network}.`));\n                return;\n            }\n\n            // Check cache first\n            if (useCache) {\n                const cached = this.storage.get(this.target);\n\n                if (!is.empty(cached) && Object.keys(cached).includes(this.network)) {\n                    resolve(cached[this.network]);\n                    this.console.log(`getCount for '${this.target}' for '${this.network}' resolved from cache`);\n                    return;\n                }\n            }\n\n            // When we get here, this means the cached counts are not valid,\n            // or don't exist. We will call the API if the URL is available\n            // at this point.\n\n            // Runs a GET request on the URL\n            getJSONP(url)\n                .then(data => {\n                    let count = 0;\n                    const custom = this.elements.trigger.getAttribute('data-shr-display');\n\n                    // Get value based on config\n                    if (!is.empty(custom)) {\n                        count = data[custom];\n                    } else {\n                        count = this.networkConfig.shareCount(data);\n                    }\n\n                    // Default to zero for undefined\n                    if (is.empty(count)) {\n                        count = 0;\n                    }\n\n                    // Parse\n                    count = parseInt(count, 10);\n\n                    // Cache in local storage\n                    this.storage.set({\n                        [this.target]: {\n                            [this.network]: count,\n                        },\n                    });\n\n                    resolve(count);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Display the count\n     * @param {Number} input         - The count returned from the share count API\n     * @param {Boolean} increment   -  Determines if we should increment the count or not\n     * @returns {Void}\n     */\n    updateDisplay(input, increment = false) {\n        // If we're incrementing (e.g. on click)\n        const count = increment ? input + 1 : input;\n\n        // Standardize position\n        const position = this.config.count.position.toLowerCase();\n\n        // Only display if there's a count\n        if (count > 0 || this.config.count.displayZero) {\n            const isAfter = position === 'after';\n            const round = unit => Math.round((count / unit) * 10) / 10;\n\n            // Format\n            let label;\n            if (count < 1000 || !this.config.count.format) {\n                label = formatNumber(count);\n            } else {\n                if (count > 1000000) {\n                    label = `${round(1000000)}M`;\n                }\n\n                label = `${round(1000)}K`;\n            }\n\n            // Update or insert\n            if (is.element(this.elements.count)) {\n                this.elements.count.textContent = label;\n            } else {\n                const { count, wrapper } = this.config;\n\n                // Add wrapper\n                wrap(\n                    this.elements.trigger,\n                    createElement('span', {\n                        class: wrapper.className,\n                    }),\n                );\n\n                // Create count display\n                this.elements.count = createElement(\n                    'span',\n                    {\n                        class: `${count.className} ${count.className}--${position}`,\n                    },\n                    label,\n                );\n\n                // Insert count display\n                this.elements.trigger.insertAdjacentElement(isAfter ? 'afterend' : 'beforebegin', this.elements.count);\n            }\n        }\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     * @returns {Array}                                 An array of instances\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.string(target)) {\n            targets = Array.from(document.querySelectorAll(target));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = Object.assign({}, defaults, options);\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const share = new Shr(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new Shr(t, options));\n    }\n}\n\nexport default Shr;\n","/**\n * Makes the JSONP request to get the social network to get the share count.\n *\n * @param {string} url          - The URL of the of the sharing API.\n * @param {function} callback   - The callback funciton once the API completes the request.\n */\nexport function getJSONP(url) {\n    return new Promise((resolve, reject) => {\n        // Generate a random callback\n        const name = `jsonp_callback_${Math.round(100000 * Math.random())}`;\n\n        // Create a faux script\n        const script = document.createElement('script');\n\n        // Handle errors\n        script.addEventListener('error', error => reject(error));\n\n        // Cleanup to prevent memory leaks and hit original callback\n        window[name] = data => {\n            delete window[name];\n            document.body.removeChild(script);\n            resolve(data);\n        };\n\n        // Add callback to URL\n        const src = new URL(url);\n        src.searchParams.set('callback', name);\n\n        // Set src and load\n        script.setAttribute('src', src.toString());\n\n        // Inject to the body\n        document.body.appendChild(script);\n    });\n}\n\nexport default { getJSONP };\n","export function formatNumber(number) {\n    // Work out whether decimal separator is . or , for localised numbers\n    const decimalSeparator = /\\./.test((1.1).toLocaleString()) ? '.' : ',';\n\n    // Round n to an integer and present\n    const regex = new RegExp(`\\\\${decimalSeparator}\\\\d+$`);\n\n    return Math.round(number)\n        .toLocaleString()\n        .replace(regex, '');\n}\n\nexport default { formatNumber };\n","export function getDomain(href) {\n    const url = new URL(href);\n    let domain = url.hostname;\n    const parts = domain.split('.');\n    const { length } = parts;\n\n    // Extract the root domain\n    if (length > 2) {\n        domain = `${parts[length - 2]}.${parts[length - 1]}`;\n\n        // Check to see if it's using a Country Code Top Level Domain (ccTLD) (i.e. \".me.uk\")\n        if (parts[length - 2].length === 2 && parts[length - 1].length === 2) {\n            domain = `${parts[length - 3]}.${domain}`;\n        }\n    }\n\n    return domain;\n}\n\nexport default { getDomain };\n","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n\nexport default { matches };\n"]}